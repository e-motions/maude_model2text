<?xml version="1.0" encoding="ISO-8859-1"?>
<Maude:MaudeSpec xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Maude="http://MaudeMM/1.0" printableEls="//@els.1">
  <els xsi:type="Maude:SModule" name="@ECORE@">
    <els xsi:type="Maude:Sort" name="@Package"/>
    <els xsi:type="Maude:Sort" name="@BasicType"/>
    <els xsi:type="Maude:Sort" name="@Classifier"/>
    <els xsi:type="Maude:Sort" name="@DataType"/>
    <els xsi:type="Maude:Sort" name="@Class" subsortRels="//@els.1/@els.11 //@els.1/@els.101 //@els.1/@els.155 //@els.1/@els.290 //@els.1/@els.308 //@els.1/@els.317 //@els.1/@els.353 //@els.1/@els.470 //@els.1/@els.479 //@els.1/@els.506 //@els.1/@els.542 //@els.1/@els.749 //@els.1/@els.785 //@els.1/@els.794 //@els.1/@els.803 //@els.1/@els.821 //@els.1/@els.956 //@els.1/@els.974 //@els.1/@els.1037 //@els.1/@els.1154 //@els.1/@els.1190 //@els.1/@els.1208 //@els.1/@els.1343 //@els.1/@els.1442 //@els.1/@els.1595 //@els.1/@els.1604 //@els.1/@els.1613 //@els.1/@els.1622 //@els.1/@els.1658 //@els.1/@els.1667 //@els.1/@els.1676 //@els.1/@els.1685 //@els.1/@els.1694 //@els.1/@els.1730 //@els.1/@els.1739 //@els.1/@els.1748 //@els.1/@els.1757"/>
    <els xsi:type="Maude:Sort" name="@Metamodel"/>
    <els xsi:type="Maude:Sort" name="@ERROR@"/>
    <els xsi:type="Maude:Sort" name="@Attribute"/>
    <els xsi:type="Maude:Sort" name="@Reference"/>
    <els xsi:type="Maude:Sort" name="Int"/>
    <els xsi:type="Maude:Sort" name="Nat"/>
    <els xsi:type="Maude:Sort" name="Nat"/>
    <els xsi:type="Maude:Sort" name="Bool"/>
    <els xsi:type="Maude:Sort" name="String"/>
    <els xsi:type="Maude:Sort" name="List{OCL-Exp}"/>
    <els xsi:type="Maude:Sort" name="@Enumeration"/>
    <els xsi:type="Maude:Sort" name="@EnumerationInstance" subsortRels="//@els.1/@els.5639 //@els.1/@els.5647 //@els.1/@els.5655 //@els.1/@els.5663 //@els.1/@els.5671 //@els.1/@els.5679 //@els.1/@els.5687 //@els.1/@els.5695"/>
    <els xsi:type="Maude:Sort" name="MyList"/>
    <els xsi:type="Maude:Sort" name="OclVoid"/>
  </els>
  <els xsi:type="Maude:SModule" name="@PCMFLATTEN@">
    <els xsi:type="Maude:ModImportation">
      <imports xsi:type="Maude:ModuleIdModExp" module="//@els.0"/>
    </els>
    <els xsi:type="Maude:Operation" name="@pcmflatten@" coarity="//@els.0/@els.5"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.5" op="@pcmflatten@"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;pcmflatten&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="packages">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.5" op="@pcmflatten@"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Operation" name="pcmflatten" coarity="//@els.0/@els.0"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;pcmflatten&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.5" op="metamodel">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.5" op="@pcmflatten@"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="superPackage">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="subPackages">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="classes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMpcmDummyClass@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStop@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStart@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeComponent@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStopAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStartAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsubsystemSubSystem@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariableReference@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="PCMpcmDummyClass@pcmflatten" supersortRels="//@els.1/@els.11"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.10" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMpcmDummyClass@pcmflatten" coarity="//@els.1/@els.10"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMpcmDummyClass@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMpcmDummyClass&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMpcmDummyClass@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMpcmDummyClass@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMpcmDummyClass@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMpcmDummyClass@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMpcmDummyClass@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcorePCMRandomVariable@pcmflatten" supersortRels="//@els.1/@els.20"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.19" supersorts="//@els.1/@els.1594"/>
    <els xsi:type="Maude:Operation" name="PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.1/@els.19"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcorePCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityResourceProvidedRole@pcmflatten" supersortRels="//@els.1/@els.29"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.28" supersorts="//@els.1/@els.712"/>
    <els xsi:type="Maude:Operation" name="PCMentityResourceProvidedRole@pcmflatten" coarity="//@els.1/@els.28"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityResourceProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityInterfaceProvidingRequiringEntity@pcmflatten" subsortRels="//@els.1/@els.92 //@els.1/@els.452" supersortRels="//@els.1/@els.38"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.37" supersorts="//@els.1/@els.46 //@els.1/@els.55"/>
    <els xsi:type="Maude:Operation" name="PCMentityInterfaceProvidingRequiringEntity@pcmflatten" coarity="//@els.1/@els.37"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityInterfaceProvidingRequiringEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityInterfaceProvidingEntity@pcmflatten" subsortRels="//@els.1/@els.38" supersortRels="//@els.1/@els.47"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.46" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMentityInterfaceProvidingEntity@pcmflatten" coarity="//@els.1/@els.46"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityInterfaceProvidingEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityInterfaceRequiringEntity@pcmflatten" subsortRels="//@els.1/@els.38" supersortRels="//@els.1/@els.56"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.55" supersorts="//@els.1/@els.118 //@els.1/@els.64"/>
    <els xsi:type="Maude:Operation" name="PCMentityInterfaceRequiringEntity@pcmflatten" coarity="//@els.1/@els.55"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityInterfaceRequiringEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityResourceInterfaceRequiringEntity@pcmflatten" subsortRels="//@els.1/@els.56 //@els.1/@els.110" supersortRels="//@els.1/@els.65"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.64" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMentityResourceInterfaceRequiringEntity@pcmflatten" coarity="//@els.1/@els.64"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityResourceInterfaceRequiringEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityResourceRequiredRole@pcmflatten" supersortRels="//@els.1/@els.74"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.73" supersorts="//@els.1/@els.712"/>
    <els xsi:type="Maude:Operation" name="PCMentityResourceRequiredRole@pcmflatten" coarity="//@els.1/@els.73"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityResourceRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityResourceInterfaceProvidingEntity@pcmflatten" subsortRels="//@els.1/@els.110 //@els.1/@els.740" supersortRels="//@els.1/@els.83"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.82" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMentityResourceInterfaceProvidingEntity@pcmflatten" coarity="//@els.1/@els.82"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityResourceInterfaceProvidingEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityComposedProvidingRequiringEntity@pcmflatten" subsortRels="//@els.1/@els.668 //@els.1/@els.1253 //@els.1/@els.1325" supersortRels="//@els.1/@els.92"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.91" supersorts="//@els.1/@els.145 //@els.1/@els.37"/>
    <els xsi:type="Maude:Operation" name="PCMentityComposedProvidingRequiringEntity@pcmflatten" coarity="//@els.1/@els.91"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityComposedProvidingRequiringEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityNamedElement@pcmflatten" subsortRels="//@els.1/@els.119 //@els.1/@els.704 //@els.1/@els.1262" supersortRels="//@els.1/@els.101"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.100" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMentityNamedElement@pcmflatten" coarity="//@els.1/@els.100"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityNamedElement&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten" supersortRels="//@els.1/@els.110"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.109" supersorts="//@els.1/@els.64 //@els.1/@els.82"/>
    <els xsi:type="Maude:Operation" name="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten" coarity="//@els.1/@els.109"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityResourceInterfaceProvidingRequiringEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMentityEntity@pcmflatten" subsortRels="//@els.1/@els.47 //@els.1/@els.56 //@els.1/@els.65 //@els.1/@els.83 //@els.1/@els.137 //@els.1/@els.146 //@els.1/@els.164 //@els.1/@els.281 //@els.1/@els.299 //@els.1/@els.335 //@els.1/@els.344 //@els.1/@els.425 //@els.1/@els.488 //@els.1/@els.497 //@els.1/@els.533 //@els.1/@els.686 //@els.1/@els.695 //@els.1/@els.713 //@els.1/@els.722 //@els.1/@els.740 //@els.1/@els.758 //@els.1/@els.776 //@els.1/@els.884 //@els.1/@els.911 //@els.1/@els.938 //@els.1/@els.1181 //@els.1/@els.1199 //@els.1/@els.1253 //@els.1/@els.1271 //@els.1/@els.1280 //@els.1/@els.1307 //@els.1/@els.1316" supersortRels="//@els.1/@els.119"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.118" supersorts="//@els.1/@els.1666 //@els.1/@els.100"/>
    <els xsi:type="Maude:Operation" name="PCMentityEntity@pcmflatten" coarity="//@els.1/@els.118"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMentityEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionDelegationConnector@pcmflatten" subsortRels="//@els.1/@els.191 //@els.1/@els.200 //@els.1/@els.227 //@els.1/@els.236 //@els.1/@els.254 //@els.1/@els.263 //@els.1/@els.272" supersortRels="//@els.1/@els.128"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.127" supersorts="//@els.1/@els.136"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionDelegationConnector@pcmflatten" coarity="//@els.1/@els.127"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionConnector@pcmflatten" subsortRels="//@els.1/@els.128 //@els.1/@els.173 //@els.1/@els.182 //@els.1/@els.209 //@els.1/@els.218 //@els.1/@els.245" supersortRels="//@els.1/@els.137"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.136" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionConnector@pcmflatten" coarity="//@els.1/@els.136"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionComposedStructure@pcmflatten" subsortRels="//@els.1/@els.92" supersortRels="//@els.1/@els.146"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.145" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionComposedStructure@pcmflatten" coarity="//@els.1/@els.145"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionComposedStructure&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionResourceRequiredDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.155"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.154" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionResourceRequiredDelegationConnector@pcmflatten" coarity="//@els.1/@els.154"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionResourceRequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionEventChannel@pcmflatten" supersortRels="//@els.1/@els.164"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.163" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionEventChannel@pcmflatten" coarity="//@els.1/@els.163"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionEventChannel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionEventChannelSourceConnector@pcmflatten" supersortRels="//@els.1/@els.173"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.172" supersorts="//@els.1/@els.136"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionEventChannelSourceConnector@pcmflatten" coarity="//@els.1/@els.172"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionEventChannelSourceConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionEventChannelSinkConnector@pcmflatten" supersortRels="//@els.1/@els.182"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.181" supersorts="//@els.1/@els.136"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionEventChannelSinkConnector@pcmflatten" coarity="//@els.1/@els.181"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionEventChannelSinkConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionProvidedDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.191"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.190" supersorts="//@els.1/@els.127"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionProvidedDelegationConnector@pcmflatten" coarity="//@els.1/@els.190"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionProvidedDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionRequiredDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.200"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.199" supersorts="//@els.1/@els.127"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionRequiredDelegationConnector@pcmflatten" coarity="//@els.1/@els.199"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionRequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionAssemblyConnector@pcmflatten" supersortRels="//@els.1/@els.209"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.208" supersorts="//@els.1/@els.136"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionAssemblyConnector@pcmflatten" coarity="//@els.1/@els.208"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionAssemblyConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionAssemblyEventConnector@pcmflatten" supersortRels="//@els.1/@els.218"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.217" supersorts="//@els.1/@els.136"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionAssemblyEventConnector@pcmflatten" coarity="//@els.1/@els.217"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionAssemblyEventConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionSourceDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.227"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.226" supersorts="//@els.1/@els.127"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionSourceDelegationConnector@pcmflatten" coarity="//@els.1/@els.226"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionSourceDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionSinkDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.236"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.235" supersorts="//@els.1/@els.127"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionSinkDelegationConnector@pcmflatten" coarity="//@els.1/@els.235"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionSinkDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionAssemblyInfrastructureConnector@pcmflatten" supersortRels="//@els.1/@els.245"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.244" supersorts="//@els.1/@els.136"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionAssemblyInfrastructureConnector@pcmflatten" coarity="//@els.1/@els.244"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionAssemblyInfrastructureConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.254"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.253" supersorts="//@els.1/@els.127"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten" coarity="//@els.1/@els.253"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionProvidedInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.263"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.262" supersorts="//@els.1/@els.127"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten" coarity="//@els.1/@els.262"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionRequiredInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionRequiredResourceDelegationConnector@pcmflatten" supersortRels="//@els.1/@els.272"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.271" supersorts="//@els.1/@els.127"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionRequiredResourceDelegationConnector@pcmflatten" coarity="//@els.1/@els.271"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionRequiredResourceDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMcompositionAssemblyContext@pcmflatten" supersortRels="//@els.1/@els.281"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.280" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMcompositionAssemblyContext@pcmflatten" coarity="//@els.1/@els.280"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMcompositionAssemblyContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelWorkload@pcmflatten" subsortRels="//@els.1/@els.398 //@els.1/@els.416" supersortRels="//@els.1/@els.290"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.289" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelWorkload@pcmflatten" coarity="//@els.1/@els.289"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelWorkload&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelUsageScenario@pcmflatten" supersortRels="//@els.1/@els.299"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.298" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelUsageScenario@pcmflatten" coarity="//@els.1/@els.298"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelUsageScenario&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelUserData@pcmflatten" supersortRels="//@els.1/@els.308"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.307" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelUserData@pcmflatten" coarity="//@els.1/@els.307"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelUserData&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelUsageModel@pcmflatten" supersortRels="//@els.1/@els.317"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.316" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelUsageModel@pcmflatten" coarity="//@els.1/@els.316"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelUsageModel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelEntryLevelSystemCall@pcmflatten" supersortRels="//@els.1/@els.326"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.325" supersorts="//@els.1/@els.334"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelEntryLevelSystemCall@pcmflatten" coarity="//@els.1/@els.325"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelEntryLevelSystemCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelAbstractUserAction@pcmflatten" subsortRels="//@els.1/@els.326 //@els.1/@els.362 //@els.1/@els.371 //@els.1/@els.380 //@els.1/@els.389 //@els.1/@els.407" supersortRels="//@els.1/@els.335"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.334" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelAbstractUserAction@pcmflatten" coarity="//@els.1/@els.334"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelAbstractUserAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelScenarioBehaviour@pcmflatten" supersortRels="//@els.1/@els.344"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.343" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelScenarioBehaviour@pcmflatten" coarity="//@els.1/@els.343"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelScenarioBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelBranchTransition@pcmflatten" supersortRels="//@els.1/@els.353"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.352" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelBranchTransition@pcmflatten" coarity="//@els.1/@els.352"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelBranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelBranch@pcmflatten" supersortRels="//@els.1/@els.362"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.361" supersorts="//@els.1/@els.334"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelBranch@pcmflatten" coarity="//@els.1/@els.361"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelBranch&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelLoop@pcmflatten" supersortRels="//@els.1/@els.371"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.370" supersorts="//@els.1/@els.334"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelLoop@pcmflatten" coarity="//@els.1/@els.370"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelLoop&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelStop@pcmflatten" supersortRels="//@els.1/@els.380"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.379" supersorts="//@els.1/@els.334"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelStop@pcmflatten" coarity="//@els.1/@els.379"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelStop&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelStart@pcmflatten" supersortRels="//@els.1/@els.389"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.388" supersorts="//@els.1/@els.334"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelStart@pcmflatten" coarity="//@els.1/@els.388"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStart@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelStart&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStart@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStart@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStart@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStart@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelStart@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelOpenWorkload@pcmflatten" supersortRels="//@els.1/@els.398"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.397" supersorts="//@els.1/@els.289"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelOpenWorkload@pcmflatten" coarity="//@els.1/@els.397"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelOpenWorkload&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelDelay@pcmflatten" supersortRels="//@els.1/@els.407"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.406" supersorts="//@els.1/@els.334"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelDelay@pcmflatten" coarity="//@els.1/@els.406"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelDelay&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMusagemodelClosedWorkload@pcmflatten" supersortRels="//@els.1/@els.416"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.415" supersorts="//@els.1/@els.289"/>
    <els xsi:type="Maude:Operation" name="PCMusagemodelClosedWorkload@pcmflatten" coarity="//@els.1/@els.415"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMusagemodelClosedWorkload&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryPassiveResource@pcmflatten" supersortRels="//@els.1/@els.425"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.424" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryPassiveResource@pcmflatten" coarity="//@els.1/@els.424"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryPassiveResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryBasicComponent@pcmflatten" supersortRels="//@els.1/@els.434"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.433" supersorts="//@els.1/@els.442"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryBasicComponent@pcmflatten" coarity="//@els.1/@els.433"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryBasicComponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryImplementationComponentType@pcmflatten" subsortRels="//@els.1/@els.434 //@els.1/@els.668" supersortRels="//@els.1/@els.443"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.442" supersorts="//@els.1/@els.451"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryImplementationComponentType@pcmflatten" coarity="//@els.1/@els.442"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryImplementationComponentType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryRepositoryComponent@pcmflatten" subsortRels="//@els.1/@els.443 //@els.1/@els.650 //@els.1/@els.659 //@els.1/@els.1325" supersortRels="//@els.1/@els.452"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.451" supersorts="//@els.1/@els.37"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryRepositoryComponent@pcmflatten" coarity="//@els.1/@els.451"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryRepositoryComponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryProvidedRole@pcmflatten" subsortRels="//@els.1/@els.623 //@els.1/@els.632 //@els.1/@els.641" supersortRels="//@els.1/@els.461"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.460" supersorts="//@els.1/@els.712"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryProvidedRole@pcmflatten" coarity="//@els.1/@els.460"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryParameter@pcmflatten" supersortRels="//@els.1/@els.470"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.469" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryParameter@pcmflatten" coarity="//@els.1/@els.469"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryParameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryDataType@pcmflatten" subsortRels="//@els.1/@els.677 //@els.1/@els.686 //@els.1/@els.695" supersortRels="//@els.1/@els.479"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.478" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryDataType@pcmflatten" coarity="//@els.1/@els.478"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryDataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryRepository@pcmflatten" supersortRels="//@els.1/@els.488"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.487" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryRepository@pcmflatten" coarity="//@els.1/@els.487"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryRepository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryInterface@pcmflatten" subsortRels="//@els.1/@els.515 //@els.1/@els.560 //@els.1/@els.596" supersortRels="//@els.1/@els.497"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.496" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryInterface@pcmflatten" coarity="//@els.1/@els.496"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryRequiredCharacterisation@pcmflatten" supersortRels="//@els.1/@els.506"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.505" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryRequiredCharacterisation@pcmflatten" coarity="//@els.1/@els.505"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryRequiredCharacterisation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryEventGroup@pcmflatten" supersortRels="//@els.1/@els.515"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.514" supersorts="//@els.1/@els.496"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryEventGroup@pcmflatten" coarity="//@els.1/@els.514"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryEventGroup&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryEventType@pcmflatten" supersortRels="//@els.1/@els.524"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.523" supersorts="//@els.1/@els.532"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryEventType@pcmflatten" coarity="//@els.1/@els.523"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryEventType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositorySignature@pcmflatten" subsortRels="//@els.1/@els.524 //@els.1/@els.551 //@els.1/@els.587" supersortRels="//@els.1/@els.533"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.532" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMrepositorySignature@pcmflatten" coarity="//@els.1/@els.532"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositorySignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryExceptionType@pcmflatten" supersortRels="//@els.1/@els.542"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.541" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryExceptionType@pcmflatten" coarity="//@els.1/@els.541"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryExceptionType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryInfrastructureSignature@pcmflatten" supersortRels="//@els.1/@els.551"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.550" supersorts="//@els.1/@els.532"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryInfrastructureSignature@pcmflatten" coarity="//@els.1/@els.550"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryInfrastructureSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryInfrastructureInterface@pcmflatten" supersortRels="//@els.1/@els.560"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.559" supersorts="//@els.1/@els.496"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryInfrastructureInterface@pcmflatten" coarity="//@els.1/@els.559"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryInfrastructureInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryInfrastructureRequiredRole@pcmflatten" supersortRels="//@els.1/@els.569"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.568" supersorts="//@els.1/@els.577"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryInfrastructureRequiredRole@pcmflatten" coarity="//@els.1/@els.568"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryInfrastructureRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryRequiredRole@pcmflatten" subsortRels="//@els.1/@els.569 //@els.1/@els.605 //@els.1/@els.614" supersortRels="//@els.1/@els.578"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.577" supersorts="//@els.1/@els.712"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryRequiredRole@pcmflatten" coarity="//@els.1/@els.577"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryOperationSignature@pcmflatten" supersortRels="//@els.1/@els.587"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.586" supersorts="//@els.1/@els.532"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryOperationSignature@pcmflatten" coarity="//@els.1/@els.586"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryOperationSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryOperationInterface@pcmflatten" supersortRels="//@els.1/@els.596"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.595" supersorts="//@els.1/@els.496"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryOperationInterface@pcmflatten" coarity="//@els.1/@els.595"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryOperationInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryOperationRequiredRole@pcmflatten" supersortRels="//@els.1/@els.605"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.604" supersorts="//@els.1/@els.577"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryOperationRequiredRole@pcmflatten" coarity="//@els.1/@els.604"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryOperationRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositorySourceRole@pcmflatten" supersortRels="//@els.1/@els.614"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.613" supersorts="//@els.1/@els.577"/>
    <els xsi:type="Maude:Operation" name="PCMrepositorySourceRole@pcmflatten" coarity="//@els.1/@els.613"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositorySourceRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositorySinkRole@pcmflatten" supersortRels="//@els.1/@els.623"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.622" supersorts="//@els.1/@els.460"/>
    <els xsi:type="Maude:Operation" name="PCMrepositorySinkRole@pcmflatten" coarity="//@els.1/@els.622"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositorySinkRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryOperationProvidedRole@pcmflatten" supersortRels="//@els.1/@els.632"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.631" supersorts="//@els.1/@els.460"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryOperationProvidedRole@pcmflatten" coarity="//@els.1/@els.631"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryOperationProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryInfrastructureProvidedRole@pcmflatten" supersortRels="//@els.1/@els.641"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.640" supersorts="//@els.1/@els.460"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryInfrastructureProvidedRole@pcmflatten" coarity="//@els.1/@els.640"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryInfrastructureProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryCompleteComponentType@pcmflatten" supersortRels="//@els.1/@els.650"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.649" supersorts="//@els.1/@els.451"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryCompleteComponentType@pcmflatten" coarity="//@els.1/@els.649"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryCompleteComponentType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryProvidesComponentType@pcmflatten" supersortRels="//@els.1/@els.659"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.658" supersorts="//@els.1/@els.451"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryProvidesComponentType@pcmflatten" coarity="//@els.1/@els.658"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryProvidesComponentType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryCompositeComponent@pcmflatten" supersortRels="//@els.1/@els.668"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.667" supersorts="//@els.1/@els.91 //@els.1/@els.442"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryCompositeComponent@pcmflatten" coarity="//@els.1/@els.667"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryCompositeComponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryPrimitiveDataType@pcmflatten" supersortRels="//@els.1/@els.677"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.676" supersorts="//@els.1/@els.478"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryPrimitiveDataType@pcmflatten" coarity="//@els.1/@els.676"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryPrimitiveDataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryCollectionDataType@pcmflatten" supersortRels="//@els.1/@els.686"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.685" supersorts="//@els.1/@els.118 //@els.1/@els.478"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryCollectionDataType@pcmflatten" coarity="//@els.1/@els.685"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryCollectionDataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryCompositeDataType@pcmflatten" supersortRels="//@els.1/@els.695"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.694" supersorts="//@els.1/@els.118 //@els.1/@els.478"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryCompositeDataType@pcmflatten" coarity="//@els.1/@els.694"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryCompositeDataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryInnerDeclaration@pcmflatten" supersortRels="//@els.1/@els.704"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.703" supersorts="//@els.1/@els.100"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryInnerDeclaration@pcmflatten" coarity="//@els.1/@els.703"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryInnerDeclaration&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMrepositoryRole@pcmflatten" subsortRels="//@els.1/@els.29 //@els.1/@els.74 //@els.1/@els.461 //@els.1/@els.578" supersortRels="//@els.1/@els.713"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.712" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMrepositoryRole@pcmflatten" coarity="//@els.1/@els.712"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMrepositoryRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourcetypeResourceSignature@pcmflatten" supersortRels="//@els.1/@els.722"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.721" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMresourcetypeResourceSignature@pcmflatten" coarity="//@els.1/@els.721"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourcetypeResourceSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourcetypeProcessingResourceType@pcmflatten" supersortRels="//@els.1/@els.731"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.730" supersorts="//@els.1/@els.739"/>
    <els xsi:type="Maude:Operation" name="PCMresourcetypeProcessingResourceType@pcmflatten" coarity="//@els.1/@els.730"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourcetypeProcessingResourceType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourcetypeResourceType@pcmflatten" subsortRels="//@els.1/@els.731 //@els.1/@els.767" supersortRels="//@els.1/@els.740"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.739" supersorts="//@els.1/@els.118 //@els.1/@els.1657 //@els.1/@els.82"/>
    <els xsi:type="Maude:Operation" name="PCMresourcetypeResourceType@pcmflatten" coarity="//@els.1/@els.739"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourcetypeResourceType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourcetypeResourceRepository@pcmflatten" supersortRels="//@els.1/@els.749"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.748" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMresourcetypeResourceRepository@pcmflatten" coarity="//@els.1/@els.748"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourcetypeResourceRepository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourcetypeSchedulingPolicy@pcmflatten" supersortRels="//@els.1/@els.758"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.757" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMresourcetypeSchedulingPolicy@pcmflatten" coarity="//@els.1/@els.757"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourcetypeSchedulingPolicy&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourcetypeCommunicationLinkResourceType@pcmflatten" supersortRels="//@els.1/@els.767"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.766" supersorts="//@els.1/@els.739"/>
    <els xsi:type="Maude:Operation" name="PCMresourcetypeCommunicationLinkResourceType@pcmflatten" coarity="//@els.1/@els.766"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourcetypeCommunicationLinkResourceType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourcetypeResourceInterface@pcmflatten" supersortRels="//@els.1/@els.776"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.775" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMresourcetypeResourceInterface@pcmflatten" coarity="//@els.1/@els.775"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourcetypeResourceInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMprotocolProtocol@pcmflatten" supersortRels="//@els.1/@els.785"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.784" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMprotocolProtocol@pcmflatten" coarity="//@els.1/@els.784"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMprotocolProtocol&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMparameterVariableUsage@pcmflatten" supersortRels="//@els.1/@els.794"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.793" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMparameterVariableUsage@pcmflatten" coarity="//@els.1/@els.793"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMparameterVariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMparameterVariableCharacterisation@pcmflatten" supersortRels="//@els.1/@els.803"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.802" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMparameterVariableCharacterisation@pcmflatten" coarity="//@els.1/@els.802"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMparameterVariableCharacterisation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMparameterCharacterisedVariable@pcmflatten" supersortRels="//@els.1/@els.812"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.811" supersorts="//@els.1/@els.1360"/>
    <els xsi:type="Maude:Operation" name="PCMparameterCharacterisedVariable@pcmflatten" coarity="//@els.1/@els.811"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMparameterCharacterisedVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilityFailureOccurrenceDescription@pcmflatten" subsortRels="//@els.1/@els.848 //@els.1/@els.866" supersortRels="//@els.1/@els.821"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.820" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilityFailureOccurrenceDescription@pcmflatten" coarity="//@els.1/@els.820"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilityFailureOccurrenceDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilityHardwareInducedFailureType@pcmflatten" supersortRels="//@els.1/@els.830"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.829" supersorts="//@els.1/@els.883"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilityHardwareInducedFailureType@pcmflatten" coarity="//@els.1/@els.829"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilityHardwareInducedFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilitySoftwareInducedFailureType@pcmflatten" subsortRels="//@els.1/@els.875" supersortRels="//@els.1/@els.839"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.838" supersorts="//@els.1/@els.883"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilitySoftwareInducedFailureType@pcmflatten" coarity="//@els.1/@els.838"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilitySoftwareInducedFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten" supersortRels="//@els.1/@els.848"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.847" supersorts="//@els.1/@els.820"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten" coarity="//@els.1/@els.847"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilityInternalFailureOccurrenceDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilityNetworkInducedFailureType@pcmflatten" supersortRels="//@els.1/@els.857"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.856" supersorts="//@els.1/@els.883"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilityNetworkInducedFailureType@pcmflatten" coarity="//@els.1/@els.856"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilityNetworkInducedFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten" supersortRels="//@els.1/@els.866"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.865" supersorts="//@els.1/@els.820"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten" coarity="//@els.1/@els.865"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilityExternalFailureOccurrenceDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilityResourceTimeoutFailureType@pcmflatten" supersortRels="//@els.1/@els.875"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.874" supersorts="//@els.1/@els.838"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilityResourceTimeoutFailureType@pcmflatten" coarity="//@els.1/@els.874"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilityResourceTimeoutFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMreliabilityFailureType@pcmflatten" subsortRels="//@els.1/@els.830 //@els.1/@els.839 //@els.1/@els.857" supersortRels="//@els.1/@els.884"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.883" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMreliabilityFailureType@pcmflatten" coarity="//@els.1/@els.883"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMreliabilityFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffStopAction@pcmflatten" supersortRels="//@els.1/@els.893"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.892" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffStopAction@pcmflatten" coarity="//@els.1/@els.892"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffStopAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffAbstractInternalControlFlowAction@pcmflatten" subsortRels="//@els.1/@els.893 //@els.1/@els.929 //@els.1/@els.947 //@els.1/@els.965 //@els.1/@els.1001 //@els.1/@els.1019 //@els.1/@els.1073 //@els.1/@els.1100 //@els.1/@els.1109 //@els.1/@els.1127 //@els.1/@els.1172" supersortRels="//@els.1/@els.902"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.901" supersorts="//@els.1/@els.910"/>
    <els xsi:type="Maude:Operation" name="PCMseffAbstractInternalControlFlowAction@pcmflatten" coarity="//@els.1/@els.901"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffAbstractInternalControlFlowAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffAbstractAction@pcmflatten" subsortRels="//@els.1/@els.902 //@els.1/@els.1046 //@els.1/@els.1118" supersortRels="//@els.1/@els.911"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.910" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMseffAbstractAction@pcmflatten" coarity="//@els.1/@els.910"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffAbstractAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffResourceDemandingBehaviour@pcmflatten" subsortRels="//@els.1/@els.983 //@els.1/@els.992 //@els.1/@els.1028 //@els.1/@els.1163" supersortRels="//@els.1/@els.920"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.919" supersorts="//@els.1/@els.1666"/>
    <els xsi:type="Maude:Operation" name="PCMseffResourceDemandingBehaviour@pcmflatten" coarity="//@els.1/@els.919"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffResourceDemandingBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffAbstractLoopAction@pcmflatten" subsortRels="//@els.1/@els.1010 //@els.1/@els.1082" supersortRels="//@els.1/@els.929"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.928" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffAbstractLoopAction@pcmflatten" coarity="//@els.1/@els.928"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffAbstractLoopAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffAbstractBranchTransition@pcmflatten" subsortRels="//@els.1/@els.1064 //@els.1/@els.1091" supersortRels="//@els.1/@els.938"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.937" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMseffAbstractBranchTransition@pcmflatten" coarity="//@els.1/@els.937"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffAbstractBranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffBranchAction@pcmflatten" supersortRels="//@els.1/@els.947"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.946" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffBranchAction@pcmflatten" coarity="//@els.1/@els.946"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffBranchAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffCallAction@pcmflatten" subsortRels="//@els.1/@els.1055 //@els.1/@els.1109 //@els.1/@els.1118 //@els.1/@els.1136 //@els.1/@els.1145" supersortRels="//@els.1/@els.956"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.955" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMseffCallAction@pcmflatten" coarity="//@els.1/@els.955"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffCallAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffStartAction@pcmflatten" supersortRels="//@els.1/@els.965"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.964" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffStartAction@pcmflatten" coarity="//@els.1/@els.964"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStartAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffStartAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStartAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStartAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStartAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStartAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffStartAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffServiceEffectSpecification@pcmflatten" subsortRels="//@els.1/@els.983" supersortRels="//@els.1/@els.974"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.973" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMseffServiceEffectSpecification@pcmflatten" coarity="//@els.1/@els.973"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffServiceEffectSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffResourceDemandingSEFF@pcmflatten" supersortRels="//@els.1/@els.983"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.982" supersorts="//@els.1/@els.1666 //@els.1/@els.973 //@els.1/@els.919"/>
    <els xsi:type="Maude:Operation" name="PCMseffResourceDemandingSEFF@pcmflatten" coarity="//@els.1/@els.982"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffResourceDemandingSEFF&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffResourceDemandingInternalBehaviour@pcmflatten" supersortRels="//@els.1/@els.992"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.991" supersorts="//@els.1/@els.919"/>
    <els xsi:type="Maude:Operation" name="PCMseffResourceDemandingInternalBehaviour@pcmflatten" coarity="//@els.1/@els.991"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffResourceDemandingInternalBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffReleaseAction@pcmflatten" supersortRels="//@els.1/@els.1001"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1000" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffReleaseAction@pcmflatten" coarity="//@els.1/@els.1000"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffReleaseAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffLoopAction@pcmflatten" supersortRels="//@els.1/@els.1010"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1009" supersorts="//@els.1/@els.928"/>
    <els xsi:type="Maude:Operation" name="PCMseffLoopAction@pcmflatten" coarity="//@els.1/@els.1009"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffLoopAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffForkAction@pcmflatten" supersortRels="//@els.1/@els.1019"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1018" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffForkAction@pcmflatten" coarity="//@els.1/@els.1018"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffForkAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffForkedBehaviour@pcmflatten" supersortRels="//@els.1/@els.1028"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1027" supersorts="//@els.1/@els.919"/>
    <els xsi:type="Maude:Operation" name="PCMseffForkedBehaviour@pcmflatten" coarity="//@els.1/@els.1027"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffForkedBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffSynchronisationPoint@pcmflatten" supersortRels="//@els.1/@els.1037"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1036" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMseffSynchronisationPoint@pcmflatten" coarity="//@els.1/@els.1036"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffSynchronisationPoint&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffExternalCallAction@pcmflatten" supersortRels="//@els.1/@els.1046"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1045" supersorts="//@els.1/@els.910 //@els.1/@els.1054 //@els.1/@els.1180"/>
    <els xsi:type="Maude:Operation" name="PCMseffExternalCallAction@pcmflatten" coarity="//@els.1/@els.1045"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffExternalCallAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffCallReturnAction@pcmflatten" subsortRels="//@els.1/@els.1046" supersortRels="//@els.1/@els.1055"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1054" supersorts="//@els.1/@els.955"/>
    <els xsi:type="Maude:Operation" name="PCMseffCallReturnAction@pcmflatten" coarity="//@els.1/@els.1054"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffCallReturnAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffProbabilisticBranchTransition@pcmflatten" supersortRels="//@els.1/@els.1064"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1063" supersorts="//@els.1/@els.937"/>
    <els xsi:type="Maude:Operation" name="PCMseffProbabilisticBranchTransition@pcmflatten" coarity="//@els.1/@els.1063"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffProbabilisticBranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffAcquireAction@pcmflatten" supersortRels="//@els.1/@els.1073"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1072" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffAcquireAction@pcmflatten" coarity="//@els.1/@els.1072"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffAcquireAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeout@PCMseffAcquireAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffCollectionIteratorAction@pcmflatten" supersortRels="//@els.1/@els.1082"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1081" supersorts="//@els.1/@els.928"/>
    <els xsi:type="Maude:Operation" name="PCMseffCollectionIteratorAction@pcmflatten" coarity="//@els.1/@els.1081"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffCollectionIteratorAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffGuardedBranchTransition@pcmflatten" supersortRels="//@els.1/@els.1091"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1090" supersorts="//@els.1/@els.937"/>
    <els xsi:type="Maude:Operation" name="PCMseffGuardedBranchTransition@pcmflatten" coarity="//@els.1/@els.1090"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffGuardedBranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffSetVariableAction@pcmflatten" supersortRels="//@els.1/@els.1100"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1099" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffSetVariableAction@pcmflatten" coarity="//@els.1/@els.1099"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffSetVariableAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffInternalCallAction@pcmflatten" supersortRels="//@els.1/@els.1109"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1108" supersorts="//@els.1/@els.955 //@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffInternalCallAction@pcmflatten" coarity="//@els.1/@els.1108"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffInternalCallAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffEmitEventAction@pcmflatten" supersortRels="//@els.1/@els.1118"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1117" supersorts="//@els.1/@els.910 //@els.1/@els.955"/>
    <els xsi:type="Maude:Operation" name="PCMseffEmitEventAction@pcmflatten" coarity="//@els.1/@els.1117"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffEmitEventAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffInternalAction@pcmflatten" supersortRels="//@els.1/@els.1127"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1126" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseffInternalAction@pcmflatten" coarity="//@els.1/@els.1126"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffInternalAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseff@-@performanceInfrastructureCall@pcmflatten" supersortRels="//@els.1/@els.1136"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1135" supersorts="//@els.1/@els.955"/>
    <els xsi:type="Maude:Operation" name="PCMseff@-@performanceInfrastructureCall@pcmflatten" coarity="//@els.1/@els.1135"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseff_performanceInfrastructureCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseff@-@performanceResourceCall@pcmflatten" supersortRels="//@els.1/@els.1145"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1144" supersorts="//@els.1/@els.955"/>
    <els xsi:type="Maude:Operation" name="PCMseff@-@performanceResourceCall@pcmflatten" coarity="//@els.1/@els.1144"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseff_performanceResourceCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseffperformanceParametricResourceDemand@pcmflatten" supersortRels="//@els.1/@els.1154"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1153" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMseffperformanceParametricResourceDemand@pcmflatten" coarity="//@els.1/@els.1153"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseffperformanceParametricResourceDemand&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten" supersortRels="//@els.1/@els.1163"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1162" supersorts="//@els.1/@els.1180 //@els.1/@els.919"/>
    <els xsi:type="Maude:Operation" name="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten" coarity="//@els.1/@els.1162"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseff_reliabilityRecoveryActionBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseff@-@reliabilityRecoveryAction@pcmflatten" supersortRels="//@els.1/@els.1172"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1171" supersorts="//@els.1/@els.901"/>
    <els xsi:type="Maude:Operation" name="PCMseff@-@reliabilityRecoveryAction@pcmflatten" coarity="//@els.1/@els.1171"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseff_reliabilityRecoveryAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten" subsortRels="//@els.1/@els.1046 //@els.1/@els.1163" supersortRels="//@els.1/@els.1181"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1180" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten" coarity="//@els.1/@els.1180"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMseff_reliabilityFailureHandlingEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten" subsortRels="//@els.1/@els.1226 //@els.1/@els.1244" supersortRels="//@els.1/@els.1190"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1189" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten" coarity="//@els.1/@els.1189"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMqosannotationsSpecifiedQoSAnnotation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMqosannotationsQoSAnnotations@pcmflatten" supersortRels="//@els.1/@els.1199"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1198" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMqosannotationsQoSAnnotations@pcmflatten" coarity="//@els.1/@els.1198"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMqosannotationsQoSAnnotations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten" supersortRels="//@els.1/@els.1208"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1207" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten" coarity="//@els.1/@els.1207"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMqosannotationsSpecifiedOutputParameterAbstraction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten" supersortRels="//@els.1/@els.1217"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1216" supersorts="//@els.1/@els.1225"/>
    <els xsi:type="Maude:Operation" name="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten" coarity="//@els.1/@els.1216"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMqos_performanceSystemSpecifiedExecutionTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSystemSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten" subsortRels="//@els.1/@els.1217 //@els.1/@els.1235" supersortRels="//@els.1/@els.1226"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1225" supersorts="//@els.1/@els.1189"/>
    <els xsi:type="Maude:Operation" name="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten" coarity="//@els.1/@els.1225"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMqos_performanceSpecifiedExecutionTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten" supersortRels="//@els.1/@els.1235"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1234" supersorts="//@els.1/@els.1225"/>
    <els xsi:type="Maude:Operation" name="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten" coarity="//@els.1/@els.1234"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMqos_performanceComponentSpecifiedExecutionTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten" supersortRels="//@els.1/@els.1244"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1243" supersorts="//@els.1/@els.1189"/>
    <els xsi:type="Maude:Operation" name="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten" coarity="//@els.1/@els.1243"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMqos_reliabilitySpecifiedReliabilityAnnotation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMsystemSystem@pcmflatten" supersortRels="//@els.1/@els.1253"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1252" supersorts="//@els.1/@els.118 //@els.1/@els.91"/>
    <els xsi:type="Maude:Operation" name="PCMsystemSystem@pcmflatten" coarity="//@els.1/@els.1252"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMsystemSystem&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourceenvironmentResourceEnvironment@pcmflatten" supersortRels="//@els.1/@els.1262"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1261" supersorts="//@els.1/@els.100"/>
    <els xsi:type="Maude:Operation" name="PCMresourceenvironmentResourceEnvironment@pcmflatten" coarity="//@els.1/@els.1261"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourceenvironmentResourceEnvironment&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourceenvironmentLinkingResource@pcmflatten" supersortRels="//@els.1/@els.1271"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1270" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMresourceenvironmentLinkingResource@pcmflatten" coarity="//@els.1/@els.1270"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourceenvironmentLinkingResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourceenvironmentResourceContainer@pcmflatten" supersortRels="//@els.1/@els.1280"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1279" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMresourceenvironmentResourceContainer@pcmflatten" coarity="//@els.1/@els.1279"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourceenvironmentResourceContainer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" supersortRels="//@els.1/@els.1289"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1288" supersorts="//@els.1/@els.1666"/>
    <els xsi:type="Maude:Operation" name="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.1/@els.1288"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourceenvironmentProcessingResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten" supersortRels="//@els.1/@els.1298"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1297" supersorts="//@els.1/@els.1666"/>
    <els xsi:type="Maude:Operation" name="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten" coarity="//@els.1/@els.1297"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMresourceenvironmentCommunicationLinkResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMallocationAllocationContext@pcmflatten" supersortRels="//@els.1/@els.1307"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1306" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMallocationAllocationContext@pcmflatten" coarity="//@els.1/@els.1306"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMallocationAllocationContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMallocationAllocation@pcmflatten" supersortRels="//@els.1/@els.1316"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1315" supersorts="//@els.1/@els.118"/>
    <els xsi:type="Maude:Operation" name="PCMallocationAllocation@pcmflatten" coarity="//@els.1/@els.1315"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMallocationAllocation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="PCMsubsystemSubSystem@pcmflatten" supersortRels="//@els.1/@els.1325"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1324" supersorts="//@els.1/@els.91 //@els.1/@els.451"/>
    <els xsi:type="Maude:Operation" name="PCMsubsystemSubSystem@pcmflatten" coarity="//@els.1/@els.1324"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsubsystemSubSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PCMsubsystemSubSystem&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsubsystemSubSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsubsystemSubSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsubsystemSubSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityComposedProvidingRequiringEntity@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsubsystemSubSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsubsystemSubSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexVariableReference@pcmflatten" supersortRels="//@els.1/@els.1334"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1333" supersorts="//@els.1/@els.1342"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexVariableReference@pcmflatten" coarity="//@els.1/@els.1333"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariableReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexVariableReference&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariableReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariableReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariableReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariableReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariableReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexAbstractNamedReference@pcmflatten" subsortRels="//@els.1/@els.1334 //@els.1/@els.1352" supersortRels="//@els.1/@els.1343"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1342" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexAbstractNamedReference@pcmflatten" coarity="//@els.1/@els.1342"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexAbstractNamedReference&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexNamespaceReference@pcmflatten" supersortRels="//@els.1/@els.1352"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1351" supersorts="//@els.1/@els.1342"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexNamespaceReference@pcmflatten" coarity="//@els.1/@els.1351"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexNamespaceReference&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexVariable@pcmflatten" subsortRels="//@els.1/@els.812" supersortRels="//@els.1/@els.1361"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1360" supersorts="//@els.1/@els.1369"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexVariable@pcmflatten" coarity="//@els.1/@els.1360"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexAtom@pcmflatten" subsortRels="//@els.1/@els.1361 //@els.1/@els.1469 //@els.1/@els.1478 //@els.1/@els.1487 //@els.1/@els.1523 //@els.1/@els.1532 //@els.1/@els.1577" supersortRels="//@els.1/@els.1370"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1369" supersorts="//@els.1/@els.1378"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexAtom@pcmflatten" coarity="//@els.1/@els.1369"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexAtom&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexUnary@pcmflatten" subsortRels="//@els.1/@els.1370 //@els.1/@els.1559 //@els.1/@els.1568" supersortRels="//@els.1/@els.1379"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1378" supersorts="//@els.1/@els.1387"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexUnary@pcmflatten" coarity="//@els.1/@els.1378"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexUnary&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexPower@pcmflatten" subsortRels="//@els.1/@els.1379 //@els.1/@els.1541" supersortRels="//@els.1/@els.1388"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1387" supersorts="//@els.1/@els.1396"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexPower@pcmflatten" coarity="//@els.1/@els.1387"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexPower&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexProduct@pcmflatten" subsortRels="//@els.1/@els.1388 //@els.1/@els.1460" supersortRels="//@els.1/@els.1397"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1396" supersorts="//@els.1/@els.1405"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexProduct@pcmflatten" coarity="//@els.1/@els.1396"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexProduct&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexTerm@pcmflatten" subsortRels="//@els.1/@els.1397 //@els.1/@els.1451" supersortRels="//@els.1/@els.1406"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1405" supersorts="//@els.1/@els.1414"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexTerm@pcmflatten" coarity="//@els.1/@els.1405"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexTerm&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexComparison@pcmflatten" subsortRels="//@els.1/@els.1406 //@els.1/@els.1514" supersortRels="//@els.1/@els.1415"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1414" supersorts="//@els.1/@els.1423"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexComparison@pcmflatten" coarity="//@els.1/@els.1414"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexComparison&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexBooleanExpression@pcmflatten" subsortRels="//@els.1/@els.1415 //@els.1/@els.1550" supersortRels="//@els.1/@els.1424"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1423" supersorts="//@els.1/@els.1432"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexBooleanExpression@pcmflatten" coarity="//@els.1/@els.1423"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexBooleanExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexIfElse@pcmflatten" subsortRels="//@els.1/@els.1424 //@els.1/@els.1586" supersortRels="//@els.1/@els.1433"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1432" supersorts="//@els.1/@els.1441"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexIfElse@pcmflatten" coarity="//@els.1/@els.1432"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexIfElse&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexExpression@pcmflatten" subsortRels="//@els.1/@els.1433" supersortRels="//@els.1/@els.1442"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1441" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexExpression@pcmflatten" coarity="//@els.1/@els.1441"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexTermExpression@pcmflatten" supersortRels="//@els.1/@els.1451"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1450" supersorts="//@els.1/@els.1405"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexTermExpression@pcmflatten" coarity="//@els.1/@els.1450"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexTermExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexTermExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexProductExpression@pcmflatten" supersortRels="//@els.1/@els.1460"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1459" supersorts="//@els.1/@els.1396"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexProductExpression@pcmflatten" coarity="//@els.1/@els.1459"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexProductExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexProductExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexProbabilityFunctionLiteral@pcmflatten" supersortRels="//@els.1/@els.1469"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1468" supersorts="//@els.1/@els.1369"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexProbabilityFunctionLiteral@pcmflatten" coarity="//@els.1/@els.1468"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexProbabilityFunctionLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexParenthesis@pcmflatten" supersortRels="//@els.1/@els.1478"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1477" supersorts="//@els.1/@els.1369"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexParenthesis@pcmflatten" coarity="//@els.1/@els.1477"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexParenthesis&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexNumericLiteral@pcmflatten" subsortRels="//@els.1/@els.1496 //@els.1/@els.1505" supersortRels="//@els.1/@els.1487"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1486" supersorts="//@els.1/@els.1657 //@els.1/@els.1369"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexNumericLiteral@pcmflatten" coarity="//@els.1/@els.1486"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexNumericLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexIntLiteral@pcmflatten" supersortRels="//@els.1/@els.1496"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1495" supersorts="//@els.1/@els.1486"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexIntLiteral@pcmflatten" coarity="//@els.1/@els.1495"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexIntLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexIntLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexDoubleLiteral@pcmflatten" supersortRels="//@els.1/@els.1505"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1504" supersorts="//@els.1/@els.1486"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexDoubleLiteral@pcmflatten" coarity="//@els.1/@els.1504"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexDoubleLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNumericLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexCompareExpression@pcmflatten" supersortRels="//@els.1/@els.1514"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1513" supersorts="//@els.1/@els.1414"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexCompareExpression@pcmflatten" coarity="//@els.1/@els.1513"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexCompareExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexComparison@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexBoolLiteral@pcmflatten" supersortRels="//@els.1/@els.1523"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1522" supersorts="//@els.1/@els.1369"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexBoolLiteral@pcmflatten" coarity="//@els.1/@els.1522"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexBoolLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexStringLiteral@pcmflatten" supersortRels="//@els.1/@els.1532"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1531" supersorts="//@els.1/@els.1369"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexStringLiteral@pcmflatten" coarity="//@els.1/@els.1531"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexStringLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexStringLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexPowerExpression@pcmflatten" supersortRels="//@els.1/@els.1541"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1540" supersorts="//@els.1/@els.1387"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexPowerExpression@pcmflatten" coarity="//@els.1/@els.1540"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexPowerExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexBooleanOperatorExpression@pcmflatten" supersortRels="//@els.1/@els.1550"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1549" supersorts="//@els.1/@els.1423"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexBooleanOperatorExpression@pcmflatten" coarity="//@els.1/@els.1549"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexBooleanOperatorExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexNotExpression@pcmflatten" supersortRels="//@els.1/@els.1559"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1558" supersorts="//@els.1/@els.1378"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexNotExpression@pcmflatten" coarity="//@els.1/@els.1558"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexNotExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexNegativeExpression@pcmflatten" supersortRels="//@els.1/@els.1568"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1567" supersorts="//@els.1/@els.1378"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexNegativeExpression@pcmflatten" coarity="//@els.1/@els.1567"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexNegativeExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexFunctionLiteral@pcmflatten" supersortRels="//@els.1/@els.1577"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1576" supersorts="//@els.1/@els.1369"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexFunctionLiteral@pcmflatten" coarity="//@els.1/@els.1576"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexFunctionLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAtom@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexIfElseExpression@pcmflatten" supersortRels="//@els.1/@els.1586"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1585" supersorts="//@els.1/@els.1432"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexIfElseExpression@pcmflatten" coarity="//@els.1/@els.1585"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexIfElseExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElse@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="STOEXstoexRandomVariable@pcmflatten" subsortRels="//@els.1/@els.20" supersortRels="//@els.1/@els.1595"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1594" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="STOEXstoexRandomVariable@pcmflatten" coarity="//@els.1/@els.1594"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;STOEXstoexRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="UNITSunitsBaseUnit@pcmflatten" supersortRels="//@els.1/@els.1604"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1603" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="UNITSunitsBaseUnit@pcmflatten" coarity="//@els.1/@els.1603"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;UNITSunitsBaseUnit&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="name@UNITSunitsBaseUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="UNITSunitsUnitRepository@pcmflatten" supersortRels="//@els.1/@els.1613"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1612" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="UNITSunitsUnitRepository@pcmflatten" coarity="//@els.1/@els.1612"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;UNITSunitsUnitRepository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="UNITSunitsUnit@pcmflatten" subsortRels="//@els.1/@els.1631 //@els.1/@els.1640 //@els.1/@els.1649" supersortRels="//@els.1/@els.1622"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1621" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="UNITSunitsUnit@pcmflatten" coarity="//@els.1/@els.1621"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;UNITSunitsUnit&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="UNITSunitsUnitMultiplication@pcmflatten" supersortRels="//@els.1/@els.1631"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1630" supersorts="//@els.1/@els.1621"/>
    <els xsi:type="Maude:Operation" name="UNITSunitsUnitMultiplication@pcmflatten" coarity="//@els.1/@els.1630"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;UNITSunitsUnitMultiplication&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="UNITSunitsUnitPower@pcmflatten" supersortRels="//@els.1/@els.1640"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1639" supersorts="//@els.1/@els.1621"/>
    <els xsi:type="Maude:Operation" name="UNITSunitsUnitPower@pcmflatten" coarity="//@els.1/@els.1639"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;UNITSunitsUnitPower&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="UNITSunitsUnitLiteral@pcmflatten" supersortRels="//@els.1/@els.1649"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1648" supersorts="//@els.1/@els.1621"/>
    <els xsi:type="Maude:Operation" name="UNITSunitsUnitLiteral@pcmflatten" coarity="//@els.1/@els.1648"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;UNITSunitsUnitLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Sort" name="UNITSunitsUnitCarryingElement@pcmflatten" subsortRels="//@els.1/@els.740 //@els.1/@els.1487" supersortRels="//@els.1/@els.1658"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1657" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="UNITSunitsUnitCarryingElement@pcmflatten" coarity="//@els.1/@els.1657"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;UNITSunitsUnitCarryingElement&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="IDENTIFIERidentifierIdentifier@pcmflatten" subsortRels="//@els.1/@els.119 //@els.1/@els.920 //@els.1/@els.983 //@els.1/@els.1289 //@els.1/@els.1298" supersortRels="//@els.1/@els.1667"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1666" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="IDENTIFIERidentifierIdentifier@pcmflatten" coarity="//@els.1/@els.1666"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;IDENTIFIERidentifierIdentifier&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="TOKENtokensUSToken@pcmflatten" subsortRels="//@els.1/@els.1703" supersortRels="//@els.1/@els.1676"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1675" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="TOKENtokensUSToken@pcmflatten" coarity="//@els.1/@els.1675"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TOKENtokensUSToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensUSToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensUSToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="TOKENtokensRETURNVar@pcmflatten" supersortRels="//@els.1/@els.1685"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1684" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="TOKENtokensRETURNVar@pcmflatten" coarity="//@els.1/@els.1684"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TOKENtokensRETURNVar&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@TOKENtokensRETURNVar@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="TOKENtokensSEFFToken@pcmflatten" subsortRels="//@els.1/@els.1712 //@els.1/@els.1721" supersortRels="//@els.1/@els.1694"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1693" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="TOKENtokensSEFFToken@pcmflatten" coarity="//@els.1/@els.1693"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TOKENtokensSEFFToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="TOKENtokensUSLoopToken@pcmflatten" supersortRels="//@els.1/@els.1703"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1702" supersorts="//@els.1/@els.1675"/>
    <els xsi:type="Maude:Operation" name="TOKENtokensUSLoopToken@pcmflatten" coarity="//@els.1/@els.1702"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TOKENtokensUSLoopToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="TOKENtokensSEFFLoopToken@pcmflatten" supersortRels="//@els.1/@els.1712"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1711" supersorts="//@els.1/@els.1693"/>
    <els xsi:type="Maude:Operation" name="TOKENtokensSEFFLoopToken@pcmflatten" coarity="//@els.1/@els.1711"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TOKENtokensSEFFLoopToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="TOKENtokensTokenProb@pcmflatten" supersortRels="//@els.1/@els.1721"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1720" supersorts="//@els.1/@els.1693"/>
    <els xsi:type="Maude:Operation" name="TOKENtokensTokenProb@pcmflatten" coarity="//@els.1/@els.1720"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TOKENtokensTokenProb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="TOKENtokensSandTimer@pcmflatten" supersortRels="//@els.1/@els.1730"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1729" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="TOKENtokensSandTimer@pcmflatten" coarity="//@els.1/@els.1729"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TOKENtokensSandTimer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="ObTimeStamp@pcmflatten" supersortRels="//@els.1/@els.1739"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1738" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="ObTimeStamp@pcmflatten" coarity="//@els.1/@els.1738"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;ObTimeStamp&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tStamp@ObTimeStamp@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Sort" name="ObResponseTime@pcmflatten" supersortRels="//@els.1/@els.1748"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1747" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="ObResponseTime@pcmflatten" coarity="//@els.1/@els.1747"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;ObResponseTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObResponseTime@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tTime@ObResponseTime@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="rTime@ObResponseTime@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="allRT@ObResponseTime@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="ObThroughPut@pcmflatten" supersortRels="//@els.1/@els.1757"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.1756" supersorts="//@els.0/@els.4"/>
    <els xsi:type="Maude:Operation" name="ObThroughPut@pcmflatten" coarity="//@els.1/@els.1756"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;ObThroughPut&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isAbstract">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="superTypes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="references">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.17" op="nil"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="attributes">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="__">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObThroughPut@pcmflatten"/>
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="thp@ObThroughPut@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Operation" name="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;closedWorkload_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;passiveResource_capacity_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;variableCharacterisation_Specification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;infrastructureCall__PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceCall__PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parametricResourceDemand_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;loopAction_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;guardedBranchTransition_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specifiedExecutionTime_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventChannelSinkConnector__FilterCondition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyEventConnector__FilterCondition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;loop_LoopIteration&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;openWorkload_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;delay_TimeSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;communicationLinkResourceSpecifcation_throughput_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;processingResourceSpecification_processingRate_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;communicationLinkResourceSpecification_latency_PCMRandomVariable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceInterfaceProvidingEntity__ResourceProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providedResourceInterface__ResourceProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedResourceInterface@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providedRoles_InterfaceProvidingEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredRoles_InterfaceRequiringEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceRequiredRoles__ResourceInterfaceRequiringEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredResourceInterface__ResourceRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredResourceInterface@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceInterfaceRequiringEntity__ResourceRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRoles@-@@-@ResourceInterfaceRequiringEntity@PCMentityResourceInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterfaceRequiringEntity@-@@-@ResourceRequiredRole@PCMentityResourceRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceProvidedRoles__ResourceInterfaceProvidingEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaceProvidingEntity@-@@-@ResourceProvidedRole@PCMentityResourceProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceProvidedRoles@-@@-@ResourceInterfaceProvidingEntity@PCMentityResourceInterfaceProvidingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentStructure__Connector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContexts__ComposedStructure&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceRequiredDelegationConnectors_ComposedStructure&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventChannel__ComposedStructure&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;connectors__ComposedStructure&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@Connector@PCMcompositionConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="connectors@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerResourceRequiredRole_ResourceRequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerResourceRequiredRole_ResourceRequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerResourceRequiredRole@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentStructure_ResourceRequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredDelegationConnectors@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@ResourceRequiredDelegationConnector@PCMcompositionResourceRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventGroup__EventChannel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventChannelSourceConnector__EventChannel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventChannelSinkConnector__EventChannel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentStructure__EventChannel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sourceRole__EventChannelSourceRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceRole@-@@-@EventChannelSourceRole@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__EventChannelSourceConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventChannel__EventChannelSourceConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSourceConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSourceConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@EventChannelSourceConnector@PCMcompositionEventChannelSourceConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sinkRole__EventChannelSinkConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sinkRole@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;filterCondition__EventChannelSinkConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="filterCondition@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__EventChannelSinkConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventChannel__EventChannelSinkConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannelSinkConnector@-@@-@EventChannel@PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannelSinkConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@EventChannelSinkConnector@PCMcompositionEventChannelSinkConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerProvidedRole_ProvidedDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerProvidedRole_ProvidedDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerProvidedRole@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext_ProvidedDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@ProvidedDelegationConnector@PCMcompositionProvidedDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerRequiredRole_RequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerRequiredRole_RequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerRequiredRole@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext_RequiredDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@RequiredDelegationConnector@PCMcompositionRequiredDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiringAssemblyContext_AssemblyConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiringAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providingAssemblyContext_AssemblyConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providingAssemblyContext@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providedRole_AssemblyConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredRole_AssemblyConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRole@-@AssemblyConnector@PCMcompositionAssemblyConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sinkRole__AssemblyEventConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sinkRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sourceRole__AssemblyEventConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceRole@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sinkAssemblyContext__AssemblyEventConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sinkAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sourceAssemblyContext__AssemblyEventConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceAssemblyContext@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;filterCondition__AssemblyEventConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyEventConnector@-@@-@FilterCondition@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyEventConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="filterCondition@-@@-@AssemblyEventConnector@PCMcompositionAssemblyEventConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerSourceRole__SourceRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerSourceRole__SourceRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerSourceRole@-@@-@SourceRole@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__SourceDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSourceDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@SourceDelegationConnector@PCMcompositionSourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__SinkDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@SinkDelegationConnector@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerSinkRole__SinkRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerSinkRole__SinkRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionSinkDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerSinkRole@-@@-@SinkRole@PCMcompositionSinkDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providedRole__AssemblyInfrastructureConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredRole__AssemblyInfrastructureConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRole@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providingAssemblyContext__AssemblyInfrastructureConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providingAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiringAssemblyContext__AssemblyInfrastructureConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiringAssemblyContext@-@@-@AssemblyInfrastructureConnector@PCMcompositionAssemblyInfrastructureConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerProvidedRole__ProvidedInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerProvidedRole__ProvidedInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerProvidedRole@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__ProvidedInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@ProvidedInfrastructureDelegationConnector@PCMcompositionProvidedInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerRequiredRole__RequiredInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerRequiredRole__RequiredInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerRequiredRole@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__RequiredInfrastructureDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@RequiredInfrastructureDelegationConnector@PCMcompositionRequiredInfrastructureDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__RequiredResourceDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerRequiredRole__RequiredResourceDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outerRequiredRole__RequiredResourceDelegationConnector&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outerRequiredRole@-@@-@RequiredResourceDelegationConnector@PCMcompositionRequiredResourceDelegationConnector@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentStructure__AssemblyContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContexts@-@@-@ComposedStructure@PCMcompositionComposedStructure@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentStructure@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;encapsulatedComponent__AssemblyContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="encapsulatedComponent@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;configParameterUsages__AssemblyContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;usageScenario_Workload&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;usageModel_UsageScenario&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;scenarioBehaviour_UsageScenario&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;workload_UsageScenario&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@Workload@PCMusagemodelWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="workload@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext_userData&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@userData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;usageModel_UserData&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;userDataParameterUsages_UserData&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;usageScenario_UsageModel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageScenario@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;userData_UsageModel&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageModel@-@UserData@PCMusagemodelUserData@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageModel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="userData@-@UsageModel@PCMusagemodelUsageModel@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providedRole_EntryLevelSystemCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedRole@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;operationSignature__EntryLevelSystemCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operationSignature@-@@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outputParameterUsages_EntryLevelSystemCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;inputParameterUsages_EntryLevelSystemCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="successor@PCMusagemodelAbstractUserAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;successor&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="predecessor@PCMusagemodelAbstractUserAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;predecessor&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="predecessor@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;scenarioBehaviour_AbstractUserAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="token@PCMusagemodelAbstractUserAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;token&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="token@PCMusagemodelAbstractUserAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;usageScenario_SenarioBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@UsageScenario@PCMusagemodelUsageScenario@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="usageScenario@-@SenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchTransition_ScenarioBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;loop_ScenarioBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;actions_ScenarioBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="scenarioBehaviour@-@AbstractUserAction@PCMusagemodelAbstractUserAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="actions@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;rtOb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="rtOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;tpOb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tpOb@PCMusagemodelScenarioBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branch_BranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchedBehaviour_BranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransition@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchedBehaviour@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchTransitions_Branch&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branch@-@BranchTransition@PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranch@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchTransitions@-@Branch@PCMusagemodelBranch@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;loopIteration_Loop&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@LoopIteration@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopIteration@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;bodyBehaviour_Loop&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loop@-@ScenarioBehaviour@PCMusagemodelScenarioBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelLoop@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="bodyBehaviour@-@Loop@PCMusagemodelLoop@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;interArrivalTime_OpenWorkload&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="openWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interArrivalTime@-@OpenWorkload@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sandTimer@PCMusagemodelOpenWorkload@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sandTimer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelOpenWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sandTimer@PCMusagemodelOpenWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;timeSpecification_Delay&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="delay@-@TimeSpecification@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelDelay@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="timeSpecification@-@Delay@PCMusagemodelDelay@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;thinkTime_ClosedWorkload&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="closedWorkload@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="thinkTime@-@ClosedWorkload@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;capacity_PassiveResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@capacity@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="capacity@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;basicComponent_PassiveResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceTimeoutFailureType__PassiveResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;serviceEffectSpecifications__BasicComponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;passiveResource_BasicComponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentCompleteComponentTypes&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentCompleteComponentTypes@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;componentParameterUsage_ImplementationComponentType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryImplementationComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="componentParameterUsage@-@ImplementationComponentType@PCMrepositoryImplementationComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;repository__RepositoryComponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providingEntity_ProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedRoles@-@InterfaceProvidingEntity@PCMentityInterfaceProvidingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providingEntity@-@ProvidedRole@PCMrepositoryProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;dataType__Parameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="dataType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;infrastructureSignature__Parameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;operationSignature__Parameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventType__Parameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceSignature__Parameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;repository__DataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;components__Repository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@RepositoryComponent@PCMrepositoryRepositoryComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="components@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;interfaces__Repository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;failureTypes__Repository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;dataTypes__Repository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@DataType@PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="dataTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentInterfaces__Interface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentInterfaces@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;protocols__Interface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="protocols@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredCharacterisations@PCMrepositoryInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredCharacterisations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;repository__Interface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interfaces@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@Interface@PCMrepositoryInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;interface_RequiredCharacterisation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredCharacterisations@PCMrepositoryInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interface@-@RequiredCharacterisation@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventTypes__EventGroup&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameter__EventType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventGroup__EventType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventTypes@-@@-@EventGroup@PCMrepositoryEventGroup@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@EventType@PCMrepositoryEventType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;exceptions__Signature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exceptions@-@@-@Signature@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="failureType@PCMrepositorySignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;failureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureType@PCMrepositorySignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameters__InfrastructureSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameters@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;infrastructureInterface__InfrastructureSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;infrastructureSignatures__InfrastructureInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureInterface@-@@-@InfrastructureSignature@PCMrepositoryInfrastructureSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureSignatures@-@@-@InfrastructureInterface@PCMrepositoryInfrastructureInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredInterface__InfrastructureRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredInterface@-@@-@InfrastructureRequiredRole@PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiringEntity_RequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRoles@-@InterfaceRequiringEntity@PCMentityInterfaceRequiringEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiringEntity@-@RequiredRole@PCMrepositoryRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;interface__OperationSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameters__OperationSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="operationSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameters@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;returnType__OperationSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="returnType@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;signatures__OperationInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="interface@-@@-@OperationSignature@PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signatures@-@@-@OperationInterface@PCMrepositoryOperationInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredInterface__OperationRequiredRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredInterface@-@@-@OperationRequiredRole@PCMrepositoryOperationRequiredRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventGroup__SourceRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@SourceRole@PCMrepositorySourceRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventGroup__SinkRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventGroup@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySinkRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventGroup@-@@-@SinkRole@PCMrepositorySinkRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providedInterface__OperationProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedInterface@-@@-@OperationProvidedRole@PCMrepositoryOperationProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;providedInterface__InfrastructureProvidedRole&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="providedInterface@-@@-@InfrastructureProvidedRole@PCMrepositoryInfrastructureProvidedRole@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentProvidesComponentTypes&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryProvidesComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompleteComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentProvidesComponentTypes@PCMrepositoryCompleteComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerType_CollectionDataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCollectionDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerType@-@CollectionDataType@PCMrepositoryCollectionDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentType_CompositeDataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentType@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerDeclaration_CompositeDataType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;datatype_InnerDeclaration&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="datatype@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;compositeDataType_InnerDeclaration&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryCompositeDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerDeclaration@-@CompositeDataType@PCMrepositoryCompositeDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInnerDeclaration@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="compositeDataType@-@InnerDeclaration@PCMrepositoryInnerDeclaration@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameter__ResourceSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignature@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceInterface__ResourceSignature&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;hardwareInducedFailureType__ProcessingResourceType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceRepository_ResourceType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceInterfaces__ResourceRepository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;schedulingPolicies__ResourceRepository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;availableResourceTypes_ResourceRepository&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@ResourceType@PCMresourcetypeResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="availableResourceTypes@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceRepository__SchedulingPolicy&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicies@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRepository@-@@-@SchedulingPolicy@PCMresourcetypeSchedulingPolicy@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;networkInducedFailureType__CommunicationLinkResourceType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceRepository__ResourceInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterfaces@-@@-@ResourceRepository@PCMresourcetypeResourceRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRepository@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceSignatures__ResourceInterface&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceInterface@-@@-@ResourceSignature@PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceInterface@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceSignatures@-@@-@ResourceInterface@PCMresourcetypeResourceInterface@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;variableCharacterisation_VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;userData_VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelUserData@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userDataParameterUsages@-@UserData@PCMusagemodelUserData@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="userData@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;callAction__VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;synchronisationPoint_VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;callReturnAction__VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;setVariableAction_VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext__VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="configParameterUsages@-@@-@AssemblyContext@PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;entryLevelSystemCall_InputParameterUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="entryLevelSystemCall@-@InputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;entryLevelSystemCall_OutputParameterUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsages@-@EntryLevelSystemCall@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="entryLevelSystemCall@-@OutputParameterUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;namedReference__VariableUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="namedReference@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specification_VariableCharacterisation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@Specification@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;variableUsage_VariableCharacterisation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableCharacterisation@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="variableUsage@-@VariableCharacterisation@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;processingResourceType__HardwareInducedFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="hardwareInducedFailureType@-@@-@ProcessingResourceType@PCMresourcetypeProcessingResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="processingResourceType@-@@-@HardwareInducedFailureType@PCMreliabilityHardwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;internalFailureOccurrenceDescriptions__SoftwareInducedFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;internalAction__InternalFailureOccurrenceDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;softwareInducedFailureType__InternalFailureOccurrenceDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@SoftwareInducedFailureType@PCMreliabilitySoftwareInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="softwareInducedFailureType@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;communicationLinkResourceType__NetworkInducedFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="networkInducedFailureType@-@@-@CommunicationLinkResourceType@PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceType@-@@-@NetworkInducedFailureType@PCMreliabilityNetworkInducedFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;failureType__ExternalFailureOccurrenceDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureType@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;passiveResource__ResourceTimeoutFailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceTimeoutFailureType@-@@-@PassiveResource@PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@@-@ResourceTimeoutFailureType@PCMreliabilityResourceTimeoutFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;repository__FailureType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@@-@Repository@PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repository@-@@-@FailureType@PCMreliabilityFailureType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceDemand_Action&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;infrastructureCall__Action&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceCall__Action&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;predecessor_AbstractAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;successor_AbstractAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="predecessor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="successor@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceDemandingBehaviour_AbstractAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="token@PCMseffAbstractAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;token&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="token@PCMseffAbstractAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;abstractLoopAction_ResourceDemandingBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;abstractBranchTransition_ResourceDemandingBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;steps_Behaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingBehaviour@-@AbstractAction@PCMseffAbstractAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="steps@-@Behaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;tpOb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tpOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;rtOb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="rtOb@PCMseffResourceDemandingBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;bodyBehaviour_Loop&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractLoopAction@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="bodyBehaviour@-@Loop@PCMseffAbstractLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchAction_AbstractBranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchBehaviour_BranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="abstractBranchTransition@-@ResourceDemandingBehaviour@PCMseffResourceDemandingBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchBehaviour@-@BranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branches@-@Branch@PCMseffBranchAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branches_Branch&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchAction@-@AbstractBranchTransition@PCMseffAbstractBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffBranchAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branches@-@Branch@PCMseffBranchAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;inputVariableUsages__CallAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inputVariableUsages@-@@-@CallAction@PCMseffCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;describedService__SEFF&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="describedService@-@@-@SEFF@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;basicComponent_ServiceEffectSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryBasicComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="serviceEffectSpecifications@-@@-@BasicComponent@PCMrepositoryBasicComponent@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="basicComponent@-@ServiceEffectSpecification@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceDemandingInternalBehaviours&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceDemandingSEFF_ResourceDemandingInternalBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingSEFF@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingInternalBehaviours@PCMseffResourceDemandingSEFF@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceDemandingSEFF@-@ResourceDemandingInternalBehaviour@PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;passiveResource_ReleaseAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffReleaseAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveResource@-@ReleaseAction@PCMseffReleaseAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;iterationCount_LoopAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopAction@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffLoopAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="iterationCount@-@LoopAction@PCMseffLoopAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;asynchronousForkedBehaviours_ForkAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;synchronisingBehaviours_ForkAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;synchronisationPoint_ForkedBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;forkAction_ForkedBehaivour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="asynchronousForkedBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="forkAction@-@ForkedBehaivour@PCMseffForkedBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;outputParameterUsage_SynchronisationPoint&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="outputParameterUsage@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;forkAction_SynchronisationPoint&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisingBehaviours@-@ForkAction@PCMseffForkAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="forkAction@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;synchronousForkedBehaviours_SynchronisationPoint&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffForkedBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronisationPoint@-@ForkedBehaviour@PCMseffForkedBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSynchronisationPoint@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="synchronousForkedBehaviours@-@SynchronisationPoint@PCMseffSynchronisationPoint@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;calledService_ExternalService&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="calledService@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;role_ExternalService&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryOperationRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="role@-@ExternalService@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;returnVariableUsage__CallReturnAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="callReturnAction@-@@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCallReturnAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="returnVariableUsage@-@@-@CallReturnAction@PCMseffCallReturnAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;passiveresource_AcquireAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPassiveResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="passiveresource@-@AcquireAction@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameter_CollectionIteratorAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffCollectionIteratorAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameter@-@CollectionIteratorAction@PCMseffCollectionIteratorAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchCondition_GuardedBranchTransition&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="guardedBranchTransition@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffGuardedBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchCondition@-@GuardedBranchTransition@PCMseffGuardedBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;localVariableUsages_SetVariableAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="setVariableAction@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffSetVariableAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="localVariableUsages@-@SetVariableAction@PCMseffSetVariableAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;calledResourceDemandingInternalBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffResourceDemandingInternalBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="calledResourceDemandingInternalBehaviour@PCMseffInternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventType__EmitEventAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryEventType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventType@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;sourceRole__EmitEventAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySourceRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffEmitEventAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="sourceRole@-@@-@EmitEventAction@PCMseffEmitEventAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;internalFailureOccurrenceDescriptions__InternalAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalAction@-@@-@InternalFailureOccurrenceDescription@PCMreliabilityInternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="internalFailureOccurrenceDescriptions@-@@-@InternalAction@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="queue@PCMseffInternalAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;queue&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffInternalAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="queue@PCMseffInternalAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;signature__InfrastructureCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;numberOfCalls__InfrastructureCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="numberOfCalls@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;action__InfrastructureCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="infrastructureCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="action@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredRole__InfrastructureCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryInfrastructureRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredRole@-@@-@InfrastructureCall@PCMseff@-@performanceInfrastructureCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;action__ResourceCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="action@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceRequiredRole__ResourceCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityResourceRequiredRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceRequiredRole@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;signature__ResourceCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;numberOfCalls__ResourceCall&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceCall@-@@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@performanceResourceCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="numberOfCalls@-@@-@ResourceCall@PCMseff@-@performanceResourceCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specification_ParametericResourceDemand&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parametricResourceDemand@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@-@ParametericResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredResource_ParametricResourceDemand&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredResource@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;action_ParametricResourceDemand&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceDemand@-@Action@PCMseffAbstractInternalControlFlowAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffperformanceParametricResourceDemand@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="action@-@ParametricResourceDemand@PCMseffperformanceParametricResourceDemand@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;failureHandlingAlternatives__RecoveryActionBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureHandlingAlternatives@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;recoveryAction__RecoveryActionBehaviour&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;primaryBehaviour__RecoveryAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="primaryBehaviour@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;recoveryActionBehaviours__RecoveryAction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryAction@-@@-@RecoveryActionBehaviour@PCMseff@-@reliabilityRecoveryActionBehaviour@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="2"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="recoveryActionBehaviours@-@@-@RecoveryAction@PCMseff@-@reliabilityRecoveryAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;failureTypes_FailureHandlingEntity&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureTypes@-@FailureHandlingEntity@PCMseff@-@reliabilityFailureHandlingEntity@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;signature_SpecifiedQoSAnnation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@SpecifiedQoSAnnation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;role_SpecifiedQoSAnnotation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="role@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;qosAnnotations_SpecifiedQoSAnnotation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specifiedOutputParameterAbstractions_QoSAnnotations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;system_QoSAnnotations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specifiedQoSAnnotations_QoSAnnotations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedQoSAnnotation@PCMqosannotationsSpecifiedQoSAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specifiedQoSAnnotations@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;signature_SpecifiedOutputParameterAbstraction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositorySignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="signature@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;role_SpecifiedOutputParameterAbstraction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRole@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="role@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;expectedExternalOutputs_SpecifiedOutputParameterAbstraction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstraction@-@expectedExternalOutputs@-@VariableUsage@PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="expectedExternalOutputs@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;qosAnnotations_SpecifiedOutputParameterAbstraction&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedOutputParameterAbstractions@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="qosAnnotations@-@SpecifiedOutputParameterAbstraction@PCMqosannotationsSpecifiedOutputParameterAbstraction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specification_SpecifiedExecutionTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedExecutionTime@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@-@SpecifiedExecutionTime@PCMqos@-@performanceSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext_ComponentSpecifiedExecutionTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@ComponentSpecifiedExecutionTime@PCMqos@-@performanceComponentSpecifiedExecutionTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;externalFailureOccurrenceDescriptions__SpecifiedReliabilityAnnotation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="specifiedReliabilityAnnotation@-@@-@ExternalFailureOccurrenceDescription@PCMreliabilityExternalFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="externalFailureOccurrenceDescriptions@-@@-@SpecifiedReliabilityAnnotation@PCMqos@-@reliabilitySpecifiedReliabilityAnnotation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="qosAnnotations@-@System@PCMsystemSystem@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;qosAnnotations_System&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@QoSAnnotations@PCMqosannotationsQoSAnnotations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="qosAnnotations@-@System@PCMsystemSystem@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;linkingResources__ResourceEnvironment&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceContainer_ResourceEnvironment&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;connectedResourceContainers_LinkingResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="connectedResourceContainers@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;communicationLinkResourceSpecifications_LinkingResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceEnvironment_LinkingResource&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResources@-@@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceEnvironment@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;activeResourceSpecifications_ResourceContainer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceEnvironment_ResourceContainer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ResourceEnvironment@PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceEnvironment@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;nestedResourceContainers__ResourceContainer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parentResourceContainer__ResourceContainer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedResourceContainers@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parentResourceContainer@-@@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;schedulingPolicy&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeSchedulingPolicy@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="schedulingPolicy@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;activeResourceType_ActiveResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeProcessingResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="activeResourceType@-@ActiveResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;processingRate_ProcessingResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingResourceSpecification@-@processingRate@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="processingRate@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceContainer_ProcessingResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="activeResourceSpecifications@-@ResourceContainer@PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceContainer@-@ProcessingResourceSpecification@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;queue&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="queue@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;linkingResource_CommunicationLinkResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentLinkingResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifications@-@LinkingResource@PCMresourceenvironmentLinkingResource@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="linkingResource@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;communicationLinkResourceType_CommunicationLinkResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeCommunicationLinkResourceType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="communicationLinkResourceType@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;latency_CommunicationLinkResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecification@-@latency@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="latency@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;throughput_CommunicationLinkResourceSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="communicationLinkResourceSpecifcation@-@throughput@-@PCMRandomVariable@PCMcorePCMRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="throughput@-@CommunicationLinkResourceSpecification@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceContainer_AllocationContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceContainer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceContainer@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;assemblyContext_AllocationContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionAssemblyContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="assemblyContext@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;allocation_AllocationContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;eventChannel__AllocationContext&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMcompositionEventChannel@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="eventChannel@-@@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;targetResourceEnvironment_Allocation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentResourceEnvironment@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="targetResourceEnvironment@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="system@-@Allocation@PCMallocationAllocation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;system_Allocation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMsystemSystem@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="system@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;allocationContexts_Allocation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocationContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.8" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocation@-@AllocationContext@PCMallocationAllocationContext@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMallocationAllocation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="allocationContexts@-@Allocation@PCMallocationAllocation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerReference_NamespaceReference&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNamespaceReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerReference@-@NamespaceReference@STOEXstoexNamespaceReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="id@-@Variable@STOEXstoexVariable@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;id_Variable&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@-@Variable@STOEXstoexVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="left@STOEXstoexTermExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;left&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="right@STOEXstoexTermExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;right&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="left@STOEXstoexProductExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;left&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProduct@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="right@STOEXstoexProductExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;right&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;function_ProbabilityFunctionLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="function@-@ProbabilityFunctionLiteral@STOEXstoexProbabilityFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="innerExpression@STOEXstoexParenthesis@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;innerExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexParenthesis@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="innerExpression@STOEXstoexParenthesis@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="left@STOEXstoexCompareExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;left&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="right@STOEXstoexCompareExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;right&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTerm@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="base@STOEXstoexPowerExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;base&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="base@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="exponent@STOEXstoexPowerExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;exponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexPowerExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exponent@STOEXstoexPowerExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="left@STOEXstoexBooleanOperatorExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;left&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="left@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="right@STOEXstoexBooleanOperatorExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;right&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="right@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="inner@STOEXstoexNotExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;inner&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNotExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inner@STOEXstoexNotExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="inner@STOEXstoexNegativeExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;inner&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexUnary@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexNegativeExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="inner@STOEXstoexNegativeExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameters_FunctionLiteral&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameters@-@FunctionLiteral@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="ifExpression@STOEXstoexIfElseExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;ifExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="ifExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="elseExpression@STOEXstoexIfElseExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;elseExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="elseExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="conditionExpression@STOEXstoexIfElseExpression@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;conditionExpression&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIfElseExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="conditionExpression@STOEXstoexIfElseExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="units@UNITSunitsUnitRepository@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;units&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="units@UNITSunitsUnitRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="units@UNITSunitsUnitMultiplication@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;units&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitMultiplication@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="units@UNITSunitsUnitMultiplication@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="unit@UNITSunitsUnitPower@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;unit&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="unit@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="baseUnit@UNITSunitsUnitLiteral@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;baseUnit&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="baseUnit@UNITSunitsUnitLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="unit@UNITSunitsUnitCarryingElement@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;unit&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="unit@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="tsOb@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;tsOb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tsOb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="cToken@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;cToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="cToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="loopToken@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;loopToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopToken@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="varUsage@TOKENtokensRETURNVar@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;varUsage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="varUsage@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="tsOb@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;tsOb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tsOb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="context@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;context&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableUsage@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="context@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="nestedToken@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;nestedToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="nestedToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="loopToken@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;loopToken&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="loopToken@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="returnVars@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.8"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;returnVars&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.18" op="opposite">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.18" op="null"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isContainment">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.8" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="returnVars@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="entityName@PCMentityNamedElement@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;entityName&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMentityNamedElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="entityName@PCMentityNamedElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="&quot;aName&quot;"/>
    </els>
    <els xsi:type="Maude:Operation" name="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;priority&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="priority@PCMusagemodelEntryLevelSystemCall@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchProbability@PCMusagemodelBranchTransition@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchProbability&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchProbability@PCMusagemodelBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="population@PCMusagemodelClosedWorkload@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;population&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMusagemodelClosedWorkload@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="population@PCMusagemodelClosedWorkload@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="parameterName@PCMrepositoryParameter@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;parameterName&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="parameterName@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;modifier__Parameter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="ParameterModifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryParameter@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="modifier@-@@-@Parameter@PCMrepositoryParameter@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="repositoryDescription@PCMrepositoryRepository@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;repositoryDescription&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRepository@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="repositoryDescription@PCMrepositoryRepository@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="type@PCMrepositoryRequiredCharacterisation@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;type&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="VariableCharacterisationType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryRequiredCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="type@PCMrepositoryRequiredCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="exceptionName@PCMrepositoryExceptionType@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;exceptionName&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exceptionName@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="exceptionMessage@PCMrepositoryExceptionType@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;exceptionMessage&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryExceptionType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exceptionMessage@PCMrepositoryExceptionType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="type@PCMrepositoryPrimitiveDataType@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;type&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="PrimitiveTypeEnum@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMrepositoryPrimitiveDataType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="type@PCMrepositoryPrimitiveDataType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;resourceServiceId&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourcetypeResourceSignature@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="resourceServiceId@PCMresourcetypeResourceSignature@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="protocolTypeID@PCMprotocolProtocol@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;protocolTypeID&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMprotocolProtocol@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="protocolTypeID@PCMprotocolProtocol@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="type@PCMparameterVariableCharacterisation@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;type&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="VariableCharacterisationType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterVariableCharacterisation@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="type@PCMparameterVariableCharacterisation@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="characterisationType@PCMparameterCharacterisedVariable@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;characterisationType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="VariableCharacterisationType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMparameterCharacterisedVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="characterisationType@PCMparameterCharacterisedVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;failureProbability&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureProbability@PCMreliabilityFailureOccurrenceDescription@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;seffTypeID&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffServiceEffectSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="seffTypeID@PCMseffServiceEffectSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="&quot;1&quot;"/>
    </els>
    <els xsi:type="Maude:Operation" name="retryCount@PCMseffExternalCallAction@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;retryCount&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffExternalCallAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="retryCount@PCMseffExternalCallAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="0"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchProbability&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffProbabilisticBranchTransition@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchProbability@PCMseffProbabilisticBranchTransition@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="timeout@PCMseffAcquireAction@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;timeout&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Bool"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="timeout@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="timeoutValue@PCMseffAcquireAction@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;timeoutValue&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMseffAcquireAction@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="timeoutValue@PCMseffAcquireAction@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;MTTR&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTR@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="0.0"/>
    </els>
    <els xsi:type="Maude:Operation" name="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;MTTF&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="MTTF@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="0.0"/>
    </els>
    <els xsi:type="Maude:Operation" name="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;requiredByContainer&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Bool"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="requiredByContainer@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;numberOfReplicas&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="numberOfReplicas@PCMresourceenvironmentProcessingResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="1"/>
    </els>
    <els xsi:type="Maude:Operation" name="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;failureProbability&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="failureProbability@PCMresourceenvironmentCommunicationLinkResourceSpecification@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="0.0"/>
    </els>
    <els xsi:type="Maude:Operation" name="referenceName@STOEXstoexAbstractNamedReference@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;referenceName&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexAbstractNamedReference@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="referenceName@STOEXstoexAbstractNamedReference@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="operation@STOEXstoexTermExpression@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;operation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="TermOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexTermExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexTermExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="operation@STOEXstoexProductExpression@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;operation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="ProductOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexProductExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexProductExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="value@STOEXstoexIntLiteral@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;value&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexIntLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexIntLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="value@STOEXstoexDoubleLiteral@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;value&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexDoubleLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexDoubleLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="operation@STOEXstoexCompareExpression@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;operation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="CompareOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexCompareExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexCompareExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="value@STOEXstoexBoolLiteral@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;value&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Bool"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBoolLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexBoolLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="value@STOEXstoexStringLiteral@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;value&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexStringLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@STOEXstoexStringLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="operation@STOEXstoexBooleanOperatorExpression@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;operation&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="BooleanOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexBooleanOperatorExpression@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="operation@STOEXstoexBooleanOperatorExpression@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="id@STOEXstoexFunctionLiteral@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;id&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexFunctionLiteral@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@STOEXstoexFunctionLiteral@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="specification@STOEXstoexRandomVariable@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;specification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="STOEXstoexRandomVariable@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="specification@STOEXstoexRandomVariable@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="name@UNITSunitsBaseUnit@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;name&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsBaseUnit@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="name@UNITSunitsBaseUnit@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="exponent@UNITSunitsUnitPower@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;exponent&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitPower@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="exponent@UNITSunitsUnitPower@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;unitSpecification&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="UNITSunitsUnitCarryingElement@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="unitSpecification@UNITSunitsUnitCarryingElement@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="id@IDENTIFIERidentifierIdentifier@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;id&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="IDENTIFIERidentifierIdentifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@IDENTIFIERidentifierIdentifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="id@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;id&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="completed@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;completed&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Bool"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="completed@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchNumber@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchNumber&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="0"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchesProb@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchesProb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchesProb@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="prob@TOKENtokensUSToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;prob&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="prob@TOKENtokensUSToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="value@TOKENtokensRETURNVar@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;value&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensRETURNVar@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="value@TOKENtokensRETURNVar@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="id@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;id&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@String"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="id@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="completed@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;completed&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Bool"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="completed@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchNumber@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchNumber&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.1" op="specificDefaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchNumber@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.1" op="0"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchesProb@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchesProb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchesProb@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="prob@TOKENtokensSEFFToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;prob&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="prob@TOKENtokensSEFFToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="iterations@TOKENtokensUSLoopToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;iterations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="iterations@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="started@TOKENtokensUSLoopToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;started&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Bool"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensUSLoopToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="started@TOKENtokensUSLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="iterations@TOKENtokensSEFFLoopToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;iterations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="iterations@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="started@TOKENtokensSEFFLoopToken@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;started&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Bool"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSEFFLoopToken@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="started@TOKENtokensSEFFLoopToken@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="branchesProb@TOKENtokensTokenProb@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;branchesProb&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="branchesProb@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="prob@TOKENtokensTokenProb@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;prob&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensTokenProb@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="prob@TOKENtokensTokenProb@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="countDown@TOKENtokensSandTimer@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;countDown&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="TOKENtokensSandTimer@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="countDown@TOKENtokensSandTimer@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="tStamp@ObTimeStamp@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;tStamp&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObTimeStamp@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tStamp@ObTimeStamp@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="counter@ObResponseTime@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;counter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="counter@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="tTime@ObResponseTime@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;tTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="tTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="rTime@ObResponseTime@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;rTime&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="rTime@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="allRT@ObResponseTime@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;allRT&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="0"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="*"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObResponseTime@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="allRT@ObResponseTime@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Operation" name="counter@ObThroughPut@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;counter&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Int"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="counter@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Operation" name="thp@ObThroughPut@pcmflatten" coarity="//@els.0/@els.7"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;thp&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.3" op="type">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.3" op="@Float"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="lowerBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.9" op="upperBound">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.9" op="1"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.4" op="containingClass">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.4" op="ObThroughPut@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isId">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.7" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="false"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isOrdered">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.12" op="isUnique">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.6" op="thp@ObThroughPut@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.12" op="true"/>
    </els>
    <els xsi:type="Maude:Sort" name="ParameterModifier@pcmflatten" supersortRels="//@els.1/@els.5639"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5638" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="ParameterModifier@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5638" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ParameterModifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ParameterModifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;ParameterModifier&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ParameterModifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ParameterModifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="none@ParameterModifier@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ParameterModifier@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="none@ParameterModifier@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="in@ParameterModifier@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="out@ParameterModifier@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="inout@ParameterModifier@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="ComponentType@pcmflatten" supersortRels="//@els.1/@els.5647"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5646" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="ComponentType@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5646" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;ComponentType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="BUSINESSCOMPONENT@ComponentType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ComponentType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="BUSINESSCOMPONENT@ComponentType@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="INFRASTRUCTURECOMPONENT@ComponentType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="PrimitiveTypeEnum@pcmflatten" supersortRels="//@els.1/@els.5655"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5654" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="PrimitiveTypeEnum@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5654" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="PrimitiveTypeEnum@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="PrimitiveTypeEnum@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;PrimitiveTypeEnum&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="PrimitiveTypeEnum@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="PrimitiveTypeEnum@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="INT@PrimitiveTypeEnum@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="PrimitiveTypeEnum@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="INT@PrimitiveTypeEnum@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="STRING@PrimitiveTypeEnum@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="BOOL@PrimitiveTypeEnum@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="DOUBLE@PrimitiveTypeEnum@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="CHAR@PrimitiveTypeEnum@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="BYTE@PrimitiveTypeEnum@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="LONG@PrimitiveTypeEnum@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="VariableCharacterisationType@pcmflatten" supersortRels="//@els.1/@els.5663"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5662" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="VariableCharacterisationType@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5662" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="VariableCharacterisationType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="VariableCharacterisationType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;VariableCharacterisationType&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="VariableCharacterisationType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="VariableCharacterisationType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="STRUCTURE@VariableCharacterisationType@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="VariableCharacterisationType@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="STRUCTURE@VariableCharacterisationType@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="NUMBER@-@OF@-@ELEMENTS@VariableCharacterisationType@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="VALUE@VariableCharacterisationType@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="BYTESIZE@VariableCharacterisationType@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="TYPE@VariableCharacterisationType@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="TermOperations@pcmflatten" supersortRels="//@els.1/@els.5671"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5670" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="TermOperations@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5670" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="TermOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="TermOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;TermOperations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="TermOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="TermOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="ADD@TermOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="TermOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="ADD@TermOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="SUB@TermOperations@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="ProductOperations@pcmflatten" supersortRels="//@els.1/@els.5679"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5678" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="ProductOperations@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5678" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ProductOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ProductOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;ProductOperations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ProductOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ProductOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="MULT@ProductOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="ProductOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="MULT@ProductOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="DIV@ProductOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="MOD@ProductOperations@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="CompareOperations@pcmflatten" supersortRels="//@els.1/@els.5687"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5686" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="CompareOperations@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5686" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="CompareOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="CompareOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;CompareOperations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="CompareOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="CompareOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="GREATER@CompareOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="CompareOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="GREATER@CompareOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="EQUALS@CompareOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="LESS@CompareOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="NOTEQUAL@CompareOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="LESSEQUAL@CompareOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="GREATEREQUAL@CompareOperations@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Sort" name="BooleanOperations@pcmflatten" supersortRels="//@els.1/@els.5695"/>
    <els xsi:type="Maude:SubsortRel" subsorts="//@els.1/@els.5694" supersorts="//@els.0/@els.16"/>
    <els xsi:type="Maude:Operation" name="BooleanOperations@pcmflatten" coarity="//@els.0/@els.15"/>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.15" op="metaAux">
        <args xsi:type="Maude:Variable" type="//@els.1/@els.5694" name="X"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.15" op="BooleanOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.13" op="name">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="BooleanOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.13" op="&quot;BooleanOperations&quot;"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.0" op="package">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="BooleanOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.0" op="pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.16" op="defaultValue">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="BooleanOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:Constant" type="//@els.0/@els.16" op="AND@BooleanOperations@pcmflatten"/>
    </els>
    <els xsi:type="Maude:Equation">
      <lhs xsi:type="Maude:RecTerm" type="//@els.0/@els.17" op="literals">
        <args xsi:type="Maude:Constant" type="//@els.0/@els.15" op="BooleanOperations@pcmflatten"/>
      </lhs>
      <rhs xsi:type="Maude:RecTerm" type="//@els.0/@els.14" op="_#_">
        <args xsi:type="Maude:Constant" op="AND@BooleanOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="OR@BooleanOperations@pcmflatten"/>
        <args xsi:type="Maude:Constant" op="XOR@BooleanOperations@pcmflatten"/>
      </rhs>
    </els>
    <els xsi:type="Maude:Operation" name="none@ParameterModifier@pcmflatten" coarity="//@els.1/@els.5638"/>
    <els xsi:type="Maude:Operation" name="in@ParameterModifier@pcmflatten" coarity="//@els.1/@els.5638"/>
    <els xsi:type="Maude:Operation" name="out@ParameterModifier@pcmflatten" coarity="//@els.1/@els.5638"/>
    <els xsi:type="Maude:Operation" name="inout@ParameterModifier@pcmflatten" coarity="//@els.1/@els.5638"/>
    <els xsi:type="Maude:Operation" name="BUSINESSCOMPONENT@ComponentType@pcmflatten" coarity="//@els.1/@els.5646"/>
    <els xsi:type="Maude:Operation" name="INFRASTRUCTURECOMPONENT@ComponentType@pcmflatten" coarity="//@els.1/@els.5646"/>
    <els xsi:type="Maude:Operation" name="INT@PrimitiveTypeEnum@pcmflatten" coarity="//@els.1/@els.5654"/>
    <els xsi:type="Maude:Operation" name="STRING@PrimitiveTypeEnum@pcmflatten" coarity="//@els.1/@els.5654"/>
    <els xsi:type="Maude:Operation" name="BOOL@PrimitiveTypeEnum@pcmflatten" coarity="//@els.1/@els.5654"/>
    <els xsi:type="Maude:Operation" name="DOUBLE@PrimitiveTypeEnum@pcmflatten" coarity="//@els.1/@els.5654"/>
    <els xsi:type="Maude:Operation" name="CHAR@PrimitiveTypeEnum@pcmflatten" coarity="//@els.1/@els.5654"/>
    <els xsi:type="Maude:Operation" name="BYTE@PrimitiveTypeEnum@pcmflatten" coarity="//@els.1/@els.5654"/>
    <els xsi:type="Maude:Operation" name="LONG@PrimitiveTypeEnum@pcmflatten" coarity="//@els.1/@els.5654"/>
    <els xsi:type="Maude:Operation" name="STRUCTURE@VariableCharacterisationType@pcmflatten" coarity="//@els.1/@els.5662"/>
    <els xsi:type="Maude:Operation" name="NUMBER@-@OF@-@ELEMENTS@VariableCharacterisationType@pcmflatten" coarity="//@els.1/@els.5662"/>
    <els xsi:type="Maude:Operation" name="VALUE@VariableCharacterisationType@pcmflatten" coarity="//@els.1/@els.5662"/>
    <els xsi:type="Maude:Operation" name="BYTESIZE@VariableCharacterisationType@pcmflatten" coarity="//@els.1/@els.5662"/>
    <els xsi:type="Maude:Operation" name="TYPE@VariableCharacterisationType@pcmflatten" coarity="//@els.1/@els.5662"/>
    <els xsi:type="Maude:Operation" name="ADD@TermOperations@pcmflatten" coarity="//@els.1/@els.5670"/>
    <els xsi:type="Maude:Operation" name="SUB@TermOperations@pcmflatten" coarity="//@els.1/@els.5670"/>
    <els xsi:type="Maude:Operation" name="MULT@ProductOperations@pcmflatten" coarity="//@els.1/@els.5678"/>
    <els xsi:type="Maude:Operation" name="DIV@ProductOperations@pcmflatten" coarity="//@els.1/@els.5678"/>
    <els xsi:type="Maude:Operation" name="MOD@ProductOperations@pcmflatten" coarity="//@els.1/@els.5678"/>
    <els xsi:type="Maude:Operation" name="GREATER@CompareOperations@pcmflatten" coarity="//@els.1/@els.5686"/>
    <els xsi:type="Maude:Operation" name="EQUALS@CompareOperations@pcmflatten" coarity="//@els.1/@els.5686"/>
    <els xsi:type="Maude:Operation" name="LESS@CompareOperations@pcmflatten" coarity="//@els.1/@els.5686"/>
    <els xsi:type="Maude:Operation" name="NOTEQUAL@CompareOperations@pcmflatten" coarity="//@els.1/@els.5686"/>
    <els xsi:type="Maude:Operation" name="LESSEQUAL@CompareOperations@pcmflatten" coarity="//@els.1/@els.5686"/>
    <els xsi:type="Maude:Operation" name="GREATEREQUAL@CompareOperations@pcmflatten" coarity="//@els.1/@els.5686"/>
    <els xsi:type="Maude:Operation" name="AND@BooleanOperations@pcmflatten" coarity="//@els.1/@els.5694"/>
    <els xsi:type="Maude:Operation" name="OR@BooleanOperations@pcmflatten" coarity="//@els.1/@els.5694"/>
    <els xsi:type="Maude:Operation" name="XOR@BooleanOperations@pcmflatten" coarity="//@els.1/@els.5694"/>
  </els>
</Maude:MaudeSpec>
